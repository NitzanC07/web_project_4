!function(){"use strict";class e{constructor(e,t){this._settings=e,this._formElement=t,this._inputsList=Array.from(this._formElement.querySelectorAll(e.inputSelector)),this._button=this._formElement.querySelector(e.submitButtonSelector)}_showErrorMessage(e,t){const{inputErrorClass:s,errorClass:r}=this._settings;this._errorElement=this._formElement.querySelector(`.${e.id}-error`),this._errorElement.textContent=t,this._errorElement.classList.add(s),e.classList.add(r)}_hideErrorMessage(e){const{inputErrorClass:t,errorClass:s}=this._settings;this._errorElement=this._formElement.querySelector(`.${e.id}-error`),this._errorElement.textContent="",this._errorElement.classList.remove(t),e.classList.remove(s)}_checkInputValidity(e){if(e.validity.valid)this._hideErrorMessage(e);else{const t=e.validationMessage;this._showErrorMessage(e,t)}}_toggleButtonState(){const{inactiveButtonClass:e}=this._settings;this._inputsList.some((e=>!e.validity.valid))?(this._button.classList.add(e),this._button.setAttribute("disabled",!0)):(this._button.classList.remove(e),this._button.removeAttribute("disabled"))}_setEventListeners(){this._inputsList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{})),this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputsList.forEach((e=>{this._hideErrorMessage(e)}))}}const t=document.querySelector("#card-template").content,s=document.querySelector(".profile__name"),r=document.querySelector(".profile__avatar-picture"),i=document.querySelector(".profile__description"),n=document.querySelector(".popup__input_content_name"),o=document.querySelector(".popup__input_content_description"),a=document.querySelector(".popup__image"),l=document.querySelector(".popup__image-description");var c=class{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this._handleClosePopupwWithOverlay=this._handleClosePopupwWithOverlay.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}_handleClosePopupwWithOverlay(e){e.target.classList.contains("popup_open")&&this.close()}setEventListeners(){this._popup.querySelector(".popup__close-button").addEventListener("click",(()=>{this.close()}))}open(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose),document.addEventListener("mousedown",this._handleClosePopupwWithOverlay)}close(){this._popup.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("mousedown",this._handleClosePopupwWithOverlay)}},d=class extends c{constructor(e,t){super(e),this._submitHandler=t,this._form=this._popup.querySelector(".popup__form"),this._inputs=Array.from(this._form.querySelectorAll(".popup__input")),this._submitButton=this._form.querySelector(".popup__submit-button")}getInputsValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._submitButton.textContent="Saving...",this._submitHandler()}))}close(){super.close(),this._submitButton.textContent="Save",this._form.reset()}};const h=new class{constructor({baseUrl:e,headers:t}){this._baseUrl=e,this._headers=t}customFetch(e,t){return fetch(e,t).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch((e=>console.log(e)))}getInitialCards(){return this.customFetch(`${this._baseUrl}/cards`,{headers:this._headers,method:"GET"})}getUserInfo(){return this.customFetch(`${this._baseUrl}/users/me`,{headers:this._headers,method:"GET"})}changeAvatar(e){return this.customFetch(`${this._baseUrl}/users/me/avatar`,{headers:this._headers,method:"PATCH",body:JSON.stringify(e)})}setUserInfo(e){return this.customFetch(`${this._baseUrl}/users/me`,{headers:this._headers,method:"PATCH",body:JSON.stringify(e)})}createCard(e){return this.customFetch(`${this._baseUrl}/cards`,{headers:this._headers,method:"POST",body:JSON.stringify(e)})}deleteCard(e){return this.customFetch(`${this._baseUrl}/cards/${e}`,{headers:this._headers,method:"DELETE"})}likeCard(e){return this.customFetch(`${this._baseUrl}/cards/likes/${e}`,{headers:this._headers,method:"PUT"})}dislikeCard(e){return this.customFetch(`${this._baseUrl}/cards/likes/${e}`,{headers:this._headers,method:"DELETE"})}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"38a23878-64ce-4abb-ae0d-d30d11cc9a38","Content-Type":"application/json"}});let _;const u={};var p;p={inputSelector:".popup__input",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_disable",inputErrorClass:"popup__input_type_error",errorClass:"popup__input_error-visible",formSelector:".popup__form"},Array.from(document.querySelectorAll(p.formSelector)).forEach((t=>{const s=new e(p,t),r=t.getAttribute("name");u[r]=s,s.enableValidation()}));const m=new class extends c{open(e){console.log("card data",e,a,l),super.open(),a.src=e.link,a.alt=e.name,l.textContent=e.name}}(".popup_type_image");m.setEventListeners();const v=new class{constructor({renderer:e},t){this._renderer=e,this._container=document.querySelector(t)}renderer(e){e.forEach((e=>{const t=this._renderer(e);this.addItem(t)}))}addItem(e){this._container.prepend(e)}}({renderer:e=>{const s=new class{constructor({data:e,handleCardClick:t,handleDeleteCard:s,handleLikeIcon:r},i,n){this._template=i,this._name=e.name,this._link=e.link,this._ownerId=e.owner._id,this._handleCardClick=t,this._handleLikeIcon=r,this._handleDeleteCard=s,this._userId=n,this._likes=e.likes,this._cardId=e._id}_setEventListeners(){this._likeButton.addEventListener("click",(()=>this._handleLikeIcon(this._cardId,this._userId,this._likes)));const e=this._card.querySelector(".cards__delete-button");e.addEventListener("click",(()=>this._handleDeleteCard(this._userId))),this._ownerId!==this._userId&&(e.style.display="none");const t={name:this._name,link:this._link};this._card.querySelector(".cards__image").addEventListener("click",(()=>{this._handleCardClick(t)}))}removeCard(){this._card.remove(),this._card=null}likeCard(e){this._likes=e,this._likeButton.classList.add("cards__like-button_active"),this._likesCounter.textContent=this._likes.length}dislikeCard(e){this._likes=e,this._likeButton.classList.remove("cards__like-button_active"),this._likesCounter.textContent=this._likes.length}createCard(){const e=this._template.querySelector(".cards__card").cloneNode(!0),t=e.querySelector(".cards__image");return t.setAttribute("src",this._link),t.setAttribute("alt",this._name),e.querySelector(".cards__header").textContent=this._name,this._card=e,this._likeButton=this._card.querySelector(".cards__like-button"),this._likesCounter=this._card.querySelector(".cards__likes-counter"),this._likesCounter.textContent=this._likes.length,this._likes.some((e=>e._id===this._userId))&&this.likeCard(this._likes),this._setEventListeners(),this._card}}({data:e,handleCardClick:()=>{m.open(e,a,l)},handleLikeIcon:(e,t,r)=>{r.find((e=>e._id===t))?h.dislikeCard(e).then((e=>{s.dislikeCard(e.likes),console.log("Removed like from card: ",e.likes)})).catch((e=>console.log(e))):h.likeCard(e).then((e=>{s.likeCard(e.likes),console.log("Added like to card: ",e.likes)})).catch((e=>console.log(e)))},handleDeleteCard:()=>{C.open(),C.setAction((()=>{h.deleteCard(e._id).then((e=>{console.log("card is deleted",e),s.removeCard()})).catch((e=>console.log(e))),C.close()}))}},t,_);return s.createCard()}},".cards__container");Promise.all([h.getUserInfo(),h.getInitialCards()]).then((([e,t])=>{b.setUserInfo({name:e.name,about:e.about}),b.setUserAvatar(e.avatar),_=e._id,v.renderer(t)})).catch((e=>{console.log(e)}));const C=new class extends c{setAction(e){this._submitHandler=e}setEventListeners(){super.setEventListeners(),this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler()}))}}(".popup_type_delete-card");C.setEventListeners();const b=new class{constructor(e,t,s){this._name=e,this._job=t,this._avatar=s}getUserInfo(){return{name:this._name.textContent,about:this._job.textContent}}setUserInfo(e){this._name.textContent=e.name,this._job.textContent=e.about}setUserAvatar(e){this._avatar.style=`background-image: url(${e});`}}(s,i,r),E=new d(".popup_type_edit-profile",(()=>{const e=E.getInputsValues();b.setUserInfo(e),h.setUserInfo(e).then((e=>{console.log("res",e),E.close()})).catch((e=>console.log(e)))}));E.setEventListeners(),document.querySelector(".profile__edit-button").addEventListener("click",(()=>{E.open();const e=b.getUserInfo();n.value=e.name,o.value=e.about,editFormValidator.resetValidation()}));const k=new d(".popup_type_avatar",(()=>{const e=k.getInputsValues();h.changeAvatar(e).then((e=>{b.setUserAvatar(e.avatar),k.close()})).catch((e=>console.log(e)))}));k.setEventListeners(),document.querySelector(".profile__avatar").addEventListener("click",(()=>{k.open(),avatarFormValidator.resetValidation()}));const y=new d(".popup_type_add-card",(()=>{const e=y.getInputsValues();h.createCard(e).then((e=>{v.renderer([e]),y.close()})).catch((e=>console.log(e)))}));y.setEventListeners(),document.querySelector(".profile__add-button").addEventListener("click",(()=>{y.open(),u["add-place"].resetValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,