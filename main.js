!function(){"use strict";class e{constructor(e,t){this._settings=e,this._formElement=document.querySelector(`${t}`)}_showErrorMessage(e,t){const{inputErrorClass:s,errorClass:r}=this._settings;this._errorElement=this._formElement.querySelector(`.${e.id}-error`),this._errorElement.textContent=t,this._errorElement.classList.add(s),e.classList.add(r)}_hideErrorMessage(e){const{inputErrorClass:t,errorClass:s}=this._settings;this._errorElement=this._formElement.querySelector(`.${e.id}-error`),this._errorElement.textContent="",this._errorElement.classList.remove(t),e.classList.remove(s)}_checkInputValidity(e){if(e.validity.valid)this._hideErrorMessage(e);else{const t=e.validationMessage;this._showErrorMessage(e,t)}}_inputsList(){const{inputSelector:e}=this._settings;return Array.from(this._formElement.querySelectorAll(e))}_selectButton(){const{submitButtonSelector:e}=this._settings;return this._formElement.querySelector(e)}_toggleButtonState(){const{inactiveButtonClass:e}=this._settings,t=this._selectButton();this._inputsList().some((e=>!e.validity.valid))?(t.classList.add(e),t.setAttribute("disabled",!0)):(t.classList.remove(e),t.removeAttribute("disabled"))}_setEventListeners(){this._inputsList().forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{})),this._setEventListeners()}resetValidation(){const{inactiveButtonClass:e}=this._settings,t=this._selectButton();t.classList.add(e),t.setAttribute("disabled","true"),this._inputsList().forEach((e=>{this._hideErrorMessage(e)}))}}var t=class{constructor({items:e,renderer:t},s){this._items=e,this._renderer=t,this._container=document.querySelector(s)}renderer(){this._items.forEach((e=>{const t=this._renderer(e);this.addItem(t)}))}addItem(e){this._container.prepend(e)}};const s=document.querySelector("#card-template").content,r=".cards__container",n={inputSelector:".popup__input",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_disable",inputErrorClass:"popup__input_type_error",errorClass:"popup__input_error-visible"},i=document.querySelector(".profile__name"),o=document.querySelector(".profile__description"),a=document.querySelector(".popup__input_content_name"),d=document.querySelector(".popup__input_content_description"),l=document.querySelector(".popup__image"),c=document.querySelector(".popup__image-description");var _=class{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this._handleClosePopupwWithOverlay=this._handleClosePopupwWithOverlay.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}_handleClosePopupwWithOverlay(e){e.target.classList.contains("popup_open")&&this.close()}setEventListeners(){this._popup.querySelector(".popup__close-button").addEventListener("click",(()=>{this.close()}))}open(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose),document.addEventListener("mousedown",this._handleClosePopupwWithOverlay)}close(){this._popup.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("mousedown",this._handleClosePopupwWithOverlay)}},h=class extends _{constructor(e,t){super(e),this._submitHandler=t,this._form=this._popup.querySelector(".popup__form")}getInputsValues(){const e=Array.from(this._form.querySelectorAll(".popup__input")),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler()}))}close(){super.close(),this._form.reset()}};const u=(e,t)=>fetch(e,t).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch((e=>console.log(e))),p=new class{constructor({baseUrl:e,headers:t}){this._baseUrl=e,this._headers=t}getInitialCards(){return u(`${this._baseUrl}/cards`,{headers:this._headers,method:"GET"})}getUserInfo(){return u(`${this._baseUrl}/users/me`,{headers:this._headers})}createCard(e){return u(`${this._baseUrl}/cards`,{headers:this._headers,method:"POST",body:JSON.stringify(e)})}deleteCard(e){return u(`${this._baseUrl}/cards/${e}`,{headers:this._headers,method:"DELETE"})}likeCard(e){return console.log("cardId",e),u(`${this._baseUrl}/cards/likes/${e}`,{headers:this._headers,method:"PUT"})}dislikeCard(e){return u(`${this._baseUrl}/cards/likes/${e}`,{headers:this._headers,method:"DELETE"})}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"38a23878-64ce-4abb-ae0d-d30d11cc9a38","Content-Type":"application/json"}});let m;const E=new class extends _{open(e){super.open(),l.src=e.link,l.alt=e.name,c.textContent=e.name}}(".popup_type_image");E.setEventListeners();const v=new e(n,".popup__form_profile"),b=new e(n,".popup__form_add-card");v.enableValidation(),b.enableValidation(),p.getInitialCards().then((e=>{new t({items:e,renderer:y},r).renderer()})),p.getUserInfo().then((e=>{L.setUserInfo({name:e.name,about:e.about}),m=e._id}));const C=new class extends _{setAction(e){this._submitHandler=e}setEventListeners(){this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler(),this.close()}))}}(".popup_type_delete-card");C.setEventListeners();const y=e=>{const t=new class{constructor({data:e,handleCardClick:t,handleDeleteCard:s,handleLikeIcon:r},n,i){this._template=n,this._name=e.name,this._link=e.link,this._ownerId=e.owner._id,this._handleCardClick=t,this._handleLikeIcon=r,this._handleDeleteCard=s,this._userId=i,this._likes=e.likes,this._cardId=e._id}_setEventListeners(){const e=this._card.querySelector(".cards__like-button");e.addEventListener("click",(()=>this._handleLikeIcon(this._cardId,this._userId,this._likes,e))),this._card.querySelector(".cards__delete-button").addEventListener("click",(()=>this._handleDeleteCard(this._userId))),this._ownerId!==this._userId&&(this._card.querySelector(".cards__delete-button").style.display="none");const t={name:this._name,link:this._link};this._card.querySelector(".cards__image").addEventListener("click",(()=>{this._handleCardClick(t)}))}removeCard(){this._card.remove(),this._card=null}createCard(){const e=this._template.querySelector(".cards__card").cloneNode(!0),t=e.querySelector(".cards__image");return t.setAttribute("src",this._link),t.setAttribute("alt",this._name),e.querySelector(".cards__header").textContent=this._name,this._card=e,this._card.querySelector(".cards__likes-counter").textContent=this._likes.length,this._setEventListeners(),this._card}}({data:e,handleCardClick:()=>{E.open(e)},handleLikeIcon:(e,t,s,r)=>{s.find((e=>e._id===t))?(console.log("DISLIKE"),console.log(r),r.classList.remove("cards__like-button_active"),p.dislikeCard(e).then((e=>{console.log("Removed like from card: ",e)}))):(console.log("LIKE"),console.log(r),r.classList.add("cards__like-button_active"),p.likeCard(e).then((e=>{console.log("Added like to card: ",e)})))},handleDeleteCard:()=>{C.open(),C.setEventListeners(),C.setAction((()=>{p.deleteCard(e._id).then((e=>{console.log("card is deleted",e),t.removeCard()}))}))}},s,m);return t.createCard()},L=new class{constructor(e,t){this._name=e,this._job=t}getUserInfo(){return{name:this._name.textContent,about:this._job.textContent}}setUserInfo(e){this._name.textContent=e.name,this._job.textContent=e.about}}(i,o),g=new h(".popup_type_edit-profile",(()=>{L.setUserInfo(g.getInputsValues()),g.close()}));g.setEventListeners(),document.querySelector(".profile__edit-button").addEventListener("click",(()=>{g.open();const e=L.getUserInfo(i,o);a.value=e.name,d.value=e.about,v.resetValidation()}));const k=new h(".popup_type_add-card",(()=>{const e=k.getInputsValues();p.createCard(e).then((e=>{new t({item:e,renderer:y},r).addItem(y(e)),k.close()}))}));k.setEventListeners(),document.querySelector(".profile__add-button").addEventListener("click",(()=>{k.open(),b.resetValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,