!function(){"use strict";class e{constructor(e,t){this._settings=e,this._formElement=t,this._inputsList=Array.from(this._formElement.querySelectorAll(e.inputSelector)),this._button=this._formElement.querySelector(e.submitButtonSelector)}_showErrorMessage(e,t){const{inputErrorClass:s,errorClass:r}=this._settings;this._errorElement=this._formElement.querySelector(`.${e.id}-error`),this._errorElement.textContent=t,this._errorElement.classList.add(s),e.classList.add(r)}_hideErrorMessage(e){const{inputErrorClass:t,errorClass:s}=this._settings;this._errorElement=this._formElement.querySelector(`.${e.id}-error`),this._errorElement.textContent="",this._errorElement.classList.remove(t),e.classList.remove(s)}_checkInputValidity(e){if(e.validity.valid)this._hideErrorMessage(e);else{const t=e.validationMessage;this._showErrorMessage(e,t)}}_toggleButtonState(){const{inactiveButtonClass:e}=this._settings;this._inputsList.some((e=>!e.validity.valid))?(this._button.classList.add(e),this._button.setAttribute("disabled",!0)):(this._button.classList.remove(e),this._button.removeAttribute("disabled"))}_setEventListeners(){this._inputsList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{})),this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputsList.forEach((e=>{this._hideErrorMessage(e)}))}}const t=document.querySelector("#card-template").content,s=document.querySelector(".profile__name"),r=document.querySelector(".profile__avatar-picture"),i=document.querySelector(".profile__description"),n=document.querySelector(".popup__input_content_name"),o=document.querySelector(".popup__input_content_description");var a=class{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this._handleClosePopupwWithOverlay=this._handleClosePopupwWithOverlay.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}_handleClosePopupwWithOverlay(e){e.target.classList.contains("popup_open")&&this.close()}setEventListeners(){this._popup.querySelector(".popup__close-button").addEventListener("click",(()=>{this.close()}))}open(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose),document.addEventListener("mousedown",this._handleClosePopupwWithOverlay)}close(){this._popup.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("mousedown",this._handleClosePopupwWithOverlay)}},l=class extends a{constructor(e,t){super(e),this._submitHandler=t,this._form=this._popup.querySelector(".popup__form"),this._inputs=Array.from(this._form.querySelectorAll(".popup__input")),this._submitButton=this._form.querySelector(".popup__submit-button")}getInputsValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._submitButton.textContent="Saving...",this._submitHandler()}))}close(){super.close(),this._submitButton.textContent="Save",this._form.reset()}};const c=new class{constructor({baseUrl:e,headers:t}){this._baseUrl=e,this._headers=t}customFetch(e,t){return fetch(e,t).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}getInitialCards(){return this.customFetch(`${this._baseUrl}/cards`,{headers:this._headers,method:"GET"})}getUserInfo(){return this.customFetch(`${this._baseUrl}/users/me`,{headers:this._headers,method:"GET"})}changeAvatar(e){return this.customFetch(`${this._baseUrl}/users/me/avatar`,{headers:this._headers,method:"PATCH",body:JSON.stringify(e)})}setUserInfo(e){return this.customFetch(`${this._baseUrl}/users/me`,{headers:this._headers,method:"PATCH",body:JSON.stringify(e)})}createCard(e){return this.customFetch(`${this._baseUrl}/cards`,{headers:this._headers,method:"POST",body:JSON.stringify(e)})}deleteCard(e){return this.customFetch(`${this._baseUrl}/cards/${e}`,{headers:this._headers,method:"DELETE"})}likeCard(e){return this.customFetch(`${this._baseUrl}/cards/likes/${e}`,{headers:this._headers,method:"PUT"})}dislikeCard(e){return this.customFetch(`${this._baseUrl}/cards/likes/${e}`,{headers:this._headers,method:"DELETE"})}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"38a23878-64ce-4abb-ae0d-d30d11cc9a38","Content-Type":"application/json"}});let d;const h={};var _;_={inputSelector:".popup__input",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_disable",inputErrorClass:"popup__input_type_error",errorClass:"popup__input_error-visible",formSelector:".popup__form"},Array.from(document.querySelectorAll(_.formSelector)).forEach((t=>{const s=new e(_,t),r=t.getAttribute("name");h[r]=s,s.enableValidation()}));const u=new class extends a{constructor(e,t,s){super(e),this._popupImage=this._popup.querySelector(t),this._imageDescription=this._popup.querySelector(s)}open(e){super.open(),this._popupImage.src=e.link,this._popupImage.alt=e.name,this._imageDescription.textContent=e.name}}(".popup_type_image",".popup__image",".popup__image-description");u.setEventListeners();const p=new class{constructor({renderer:e},t){this._renderer=e,this._container=document.querySelector(t)}renderer(e){e.forEach((e=>{const t=this._renderer(e);this.addItem(t)}))}addItem(e){this._container.prepend(e)}}({renderer:e=>{const s=new class{constructor({data:e,handleCardClick:t,handleDeleteCard:s,handleLikeIcon:r},i,n){this._template=i,this._name=e.name,this._link=e.link,this._ownerId=e.owner._id,this._handleCardClick=t,this._handleLikeIcon=r,this._handleDeleteCard=s,this._userId=n,this._likes=e.likes,this._cardId=e._id}_setEventListeners(){this._likeButton.addEventListener("click",(()=>this._handleLikeIcon(this._cardId,this._userId,this._likes)));const e=this._card.querySelector(".cards__delete-button");e.addEventListener("click",(()=>this._handleDeleteCard(this._userId))),this._ownerId!==this._userId&&(e.style.display="none");const t={name:this._name,link:this._link};this._card.querySelector(".cards__image").addEventListener("click",(()=>{this._handleCardClick(t)}))}removeCard(){this._card.remove(),this._card=null}likeCard(e){this._likes=e,this._likeButton.classList.add("cards__like-button_active"),this._likesCounter.textContent=this._likes.length}dislikeCard(e){this._likes=e,this._likeButton.classList.remove("cards__like-button_active"),this._likesCounter.textContent=this._likes.length}createCard(){const e=this._template.querySelector(".cards__card").cloneNode(!0),t=e.querySelector(".cards__image");return t.setAttribute("src",this._link),t.setAttribute("alt",this._name),e.querySelector(".cards__header").textContent=this._name,this._card=e,this._likeButton=this._card.querySelector(".cards__like-button"),this._likesCounter=this._card.querySelector(".cards__likes-counter"),this._likesCounter.textContent=this._likes.length,this._likes.some((e=>e._id===this._userId))&&this.likeCard(this._likes),this._setEventListeners(),this._card}}({data:e,handleCardClick:()=>{u.open(e)},handleLikeIcon:(e,t,r)=>{r.find((e=>e._id===t))?c.dislikeCard(e).then((e=>{s.dislikeCard(e.likes),console.log("Removed like from card: ",e.likes)})).catch((e=>console.log(e))):c.likeCard(e).then((e=>{s.likeCard(e.likes),console.log("Added like to card: ",e.likes)})).catch((e=>console.log(e)))},handleDeleteCard:()=>{m.open(),m.setAction((()=>{c.deleteCard(e._id).then((e=>{console.log("card is deleted",e),s.removeCard(),m.close()})).catch((e=>console.log(e)))}))}},t,d);return s.createCard()}},".cards__container");Promise.all([c.getUserInfo(),c.getInitialCards()]).then((([e,t])=>{v.setUserInfo({name:e.name,about:e.about}),v.setUserAvatar(e.avatar),d=e._id,p.renderer(t)})).catch((e=>{console.log(e)}));const m=new class extends a{setAction(e){this._submitHandler=e}setEventListeners(){super.setEventListeners(),this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler()}))}}(".popup_type_delete-card");m.setEventListeners();const v=new class{constructor(e,t,s){this._name=e,this._job=t,this._avatar=s}getUserInfo(){return{name:this._name.textContent,about:this._job.textContent}}setUserInfo(e){this._name.textContent=e.name,this._job.textContent=e.about}setUserAvatar(e){this._avatar.style=`background-image: url(${e});`}}(s,i,r),C=new l(".popup_type_edit-profile",(()=>{const e=C.getInputsValues();c.setUserInfo(e).then((t=>{console.log("res",t),v.setUserInfo(e),C.close()})).catch((e=>console.log(e)))}));C.setEventListeners(),document.querySelector(".profile__edit-button").addEventListener("click",(()=>{C.open();const e=v.getUserInfo();n.value=e.name,o.value=e.about,h["edit-profile"].resetValidation()}));const b=new l(".popup_type_avatar",(()=>{const e=b.getInputsValues();c.changeAvatar(e).then((e=>{v.setUserAvatar(e.avatar),b.close()})).catch((e=>console.log(e)))}));b.setEventListeners(),document.querySelector(".profile__avatar").addEventListener("click",(()=>{b.open(),h.avatar.resetValidation()}));const E=new l(".popup_type_add-card",(()=>{const e=E.getInputsValues();c.createCard(e).then((e=>{p.renderer([e]),E.close()})).catch((e=>console.log(e)))}));E.setEventListeners(),document.querySelector(".profile__add-button").addEventListener("click",(()=>{E.open(),h["add-place"].resetValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC1tYWluLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80LW1haW4vLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQtbWFpbi8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQtbWFpbi8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC1tYWluLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQtbWFpbi8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80LW1haW4vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80LW1haW4vLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQtbWFpbi8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aFN1Ym1pdC5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80LW1haW4vLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTcHJpbnQgNyAtIHByb2plY3QgTGl2ZSBDb2RpbmcsIExpemEgLSB0aW1lIG9uIHZpZGVvOiAwOjAwIC0gNDA6MDAgbWlucy5cclxuXHJcbmNsYXNzIEZvcm1WYWxpZGF0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKHNldHRpbmdzLCBmb3JtRWxlbWVudCkge1xyXG4gICAgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gZm9ybUVsZW1lbnQ7XHJcbiAgICB0aGlzLl9pbnB1dHNMaXN0ID0gQXJyYXkuZnJvbSh0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNldHRpbmdzLmlucHV0U2VsZWN0b3IpKTtcclxuICAgIHRoaXMuX2J1dHRvbiA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3Ioc2V0dGluZ3Muc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgX3Nob3dFcnJvck1lc3NhZ2UoaW5wdXQsIGVycm9yTWVzc2FnZSkge1xyXG4gICAgY29uc3QgeyBpbnB1dEVycm9yQ2xhc3MsIGVycm9yQ2xhc3MgfSA9IHRoaXMuX3NldHRpbmdzO1xyXG4gICAgdGhpcy5fZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihgLiR7aW5wdXQuaWR9LWVycm9yYCk7XHJcbiAgICB0aGlzLl9lcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBlcnJvck1lc3NhZ2U7XHJcbiAgICB0aGlzLl9lcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZChpbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgaW5wdXQuY2xhc3NMaXN0LmFkZChlcnJvckNsYXNzKTtcclxuICB9XHJcblxyXG4gIF9oaWRlRXJyb3JNZXNzYWdlKGlucHV0KSB7XHJcbiAgICBjb25zdCB7IGlucHV0RXJyb3JDbGFzcywgZXJyb3JDbGFzcyB9ID0gdGhpcy5fc2V0dGluZ3M7XHJcbiAgICB0aGlzLl9lcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dC5pZH0tZXJyb3JgKTtcclxuICAgIHRoaXMuX2Vycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgICB0aGlzLl9lcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShpbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZShlcnJvckNsYXNzKTtcclxuICB9XHJcblxyXG4gIF9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXQpIHtcclxuICAgIGlmICghaW5wdXQudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gaW5wdXQudmFsaWRhdGlvbk1lc3NhZ2U7XHJcbiAgICAgIHRoaXMuX3Nob3dFcnJvck1lc3NhZ2UoaW5wdXQsIGVycm9yTWVzc2FnZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9oaWRlRXJyb3JNZXNzYWdlKGlucHV0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF90b2dnbGVCdXR0b25TdGF0ZSgpIHtcclxuICAgIGNvbnN0IHsgaW5hY3RpdmVCdXR0b25DbGFzcyB9ID0gdGhpcy5fc2V0dGluZ3M7XHJcbiAgICBjb25zdCBpc0Zvcm1JbnZhbGlkID0gdGhpcy5faW5wdXRzTGlzdC5zb21lKFxyXG4gICAgICAoaW5wdXRFbGVtZW50KSA9PiAhaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkXHJcbiAgICApO1xyXG4gICAgaWYgKCFpc0Zvcm1JbnZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX2J1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKGluYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgICB0aGlzLl9idXR0b24ucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9idXR0b24uY2xhc3NMaXN0LmFkZChpbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgICAgdGhpcy5fYnV0dG9uLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIHRydWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5faW5wdXRzTGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldnQpID0+IHt9KTtcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICByZXNldFZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgdGhpcy5faW5wdXRzTGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgdGhpcy5faGlkZUVycm9yTWVzc2FnZShpbnB1dEVsZW1lbnQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBGb3JtVmFsaWRhdG9yIH07XHJcbiIsImV4cG9ydCBjb25zdCBjYXJkVGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NhcmQtdGVtcGxhdGVcIikuY29udGVudDtcclxuZXhwb3J0IGNvbnN0IGNhcmRzQ29udGFpbmVyID0gXCIuY2FyZHNfX2NvbnRhaW5lclwiO1xyXG5cclxuLy8gRm9ybSBWYWxpZGF0aW9uIGNsYXNzZXMuXHJcbmV4cG9ydCBjb25zdCBjb25maWcgPSB7XHJcbiAgaW5wdXRTZWxlY3RvcjogXCIucG9wdXBfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLnBvcHVwX19zdWJtaXQtYnV0dG9uXCIsXHJcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJwb3B1cF9fc3VibWl0LWJ1dHRvbl9kaXNhYmxlXCIsXHJcbiAgaW5wdXRFcnJvckNsYXNzOiBcInBvcHVwX19pbnB1dF90eXBlX2Vycm9yXCIsXHJcbiAgZXJyb3JDbGFzczogXCJwb3B1cF9faW5wdXRfZXJyb3ItdmlzaWJsZVwiLFxyXG4gIGZvcm1TZWxlY3RvcjogXCIucG9wdXBfX2Zvcm1cIlxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVGb3JtUG9wdXAgPSBcIi5wb3B1cF9fZm9ybV9wcm9maWxlXCI7XHJcbmV4cG9ydCBjb25zdCBjaGFuZ2VBdmF0YXJQb3B1cFNlbGVjdG9yID0gXCIucG9wdXBfdHlwZV9hdmF0YXJcIjtcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVGb3JtUG9wdXBTZWxlY3RvciA9IFwiLnBvcHVwX3R5cGVfZWRpdC1wcm9maWxlXCI7XHJcbmV4cG9ydCBjb25zdCBjYXJkRm9ybVBvcHVwID0gXCIucG9wdXBfX2Zvcm1fYWRkLWNhcmRcIjtcclxuZXhwb3J0IGNvbnN0IGNhcmRGb3JtUG9wdXBTZWxlY3RvciA9IFwiLnBvcHVwX3R5cGVfYWRkLWNhcmRcIjtcclxuZXhwb3J0IGNvbnN0IHBvcHVwRm9yRGVsZXRlQ2FyZCA9IFwiLnBvcHVwX3R5cGVfZGVsZXRlLWNhcmRcIjtcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVOYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19uYW1lXCIpO1xyXG5leHBvcnQgY29uc3QgYXZhdGFyUGljdHVyZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYXZhdGFyLXBpY3R1cmVcIik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlRGVzY3JpcHRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiLnByb2ZpbGVfX2Rlc2NyaXB0aW9uXCJcclxuKTtcclxuZXhwb3J0IGNvbnN0IHBvcHVwTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2lucHV0X2NvbnRlbnRfbmFtZVwiKTtcclxuZXhwb3J0IGNvbnN0IHBvcHVwRGVzY3JpcHRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiLnBvcHVwX19pbnB1dF9jb250ZW50X2Rlc2NyaXB0aW9uXCJcclxuKTtcclxuXHJcbi8vIEltYWdlIHBvcHVwLlxyXG5leHBvcnQgY29uc3QgcG9wdXBUeXBlSW1hZ2VTZWxlY3RvciA9IFwiLnBvcHVwX3R5cGVfaW1hZ2VcIjtcclxuLy8gZXhwb3J0IGNvbnN0IHBvcHVwVHlwZUltYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wb3B1cF90eXBlX2ltYWdlXCIpO1xyXG5leHBvcnQgY29uc3QgcG9wdXBJbWFnZSA9IFwiLnBvcHVwX19pbWFnZVwiO1xyXG5leHBvcnQgY29uc3QgcG9wdXBJbWFnZURlc2NyaXB0aW9uID0gXCIucG9wdXBfX2ltYWdlLWRlc2NyaXB0aW9uXCI7XHJcbiIsImNsYXNzIENhcmQge1xyXG4gIGNvbnN0cnVjdG9yKHtkYXRhLCBoYW5kbGVDYXJkQ2xpY2ssIGhhbmRsZURlbGV0ZUNhcmQsIGhhbmRsZUxpa2VJY29ufSwgY2FyZFRlbXBsYXRlLCB1c2VySWQpIHtcclxuICAgIHRoaXMuX3RlbXBsYXRlID0gY2FyZFRlbXBsYXRlO1xyXG4gICAgdGhpcy5fbmFtZSA9IGRhdGEubmFtZTtcclxuICAgIHRoaXMuX2xpbmsgPSBkYXRhLmxpbms7XHJcbiAgICB0aGlzLl9vd25lcklkID0gZGF0YS5vd25lci5faWQ7XHJcbiAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sgPSBoYW5kbGVDYXJkQ2xpY2s7XHJcbiAgICB0aGlzLl9oYW5kbGVMaWtlSWNvbiA9IGhhbmRsZUxpa2VJY29uO1xyXG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQ2FyZCA9IGhhbmRsZURlbGV0ZUNhcmQ7XHJcbiAgICB0aGlzLl91c2VySWQgPSB1c2VySWQ7XHJcbiAgICB0aGlzLl9saWtlcyA9IGRhdGEubGlrZXM7XHJcbiAgICB0aGlzLl9jYXJkSWQgPSBkYXRhLl9pZDtcclxuICB9XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIC8vIExpa2UgYnV0dG9ucy5cclxuICAgIC8vIGNvbnN0IGxpa2VCdXR0b24gPSB0aGlzLl9jYXJkLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZHNfX2xpa2UtYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5fbGlrZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5faGFuZGxlTGlrZUljb24odGhpcy5fY2FyZElkLCB0aGlzLl91c2VySWQsIHRoaXMuX2xpa2VzKSk7XHJcblxyXG4gICAgLy8gRGVsZXRlIGJ1dHRvbnMuXHJcbiAgICBjb25zdCBkZWxldGVCdXR0b24gPSB0aGlzLl9jYXJkLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZHNfX2RlbGV0ZS1idXR0b25cIik7XHJcbiAgICBkZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+ICB0aGlzLl9oYW5kbGVEZWxldGVDYXJkKHRoaXMuX3VzZXJJZCkpO1xyXG4gICAgaWYodGhpcy5fb3duZXJJZCAhPT0gdGhpcy5fdXNlcklkKSB7XHJcbiAgICAgIGRlbGV0ZUJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2hvdyBpbWFnZSBhcyBwb3B1cC5cclxuICAgIGNvbnN0IGNhcmREYXRhID0geyBuYW1lOiB0aGlzLl9uYW1lLCBsaW5rOiB0aGlzLl9saW5rIH07XHJcbiAgICB0aGlzLl9jYXJkLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZHNfX2ltYWdlXCIpXHJcbiAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayhjYXJkRGF0YSk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuICAgIFxyXG4gIHJlbW92ZUNhcmQoKSB7XHJcbiAgICB0aGlzLl9jYXJkLnJlbW92ZSgpO1xyXG4gICAgdGhpcy5fY2FyZCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBsaWtlQ2FyZChuZXdMaWtlcykge1xyXG4gICAgdGhpcy5fbGlrZXMgPSBuZXdMaWtlcztcclxuICAgIHRoaXMuX2xpa2VCdXR0b24uY2xhc3NMaXN0LmFkZChcImNhcmRzX19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XHJcbiAgICB0aGlzLl9saWtlc0NvdW50ZXIudGV4dENvbnRlbnQgPSB0aGlzLl9saWtlcy5sZW5ndGg7XHJcbiAgfVxyXG4gIGRpc2xpa2VDYXJkKG5ld0xpa2VzKSB7XHJcbiAgICB0aGlzLl9saWtlcyA9IG5ld0xpa2VzO1xyXG4gICAgdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwiY2FyZHNfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKTtcclxuICAgIHRoaXMuX2xpa2VzQ291bnRlci50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2VzLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUNhcmQoKSB7XHJcbiAgICBjb25zdCBjYXJkID0gdGhpcy5fdGVtcGxhdGUucXVlcnlTZWxlY3RvcihcIi5jYXJkc19fY2FyZFwiKS5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICBjb25zdCBpbWcgPSBjYXJkLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZHNfX2ltYWdlXCIpO1xyXG4gICAgaW1nLnNldEF0dHJpYnV0ZShcInNyY1wiLCB0aGlzLl9saW5rKTtcclxuICAgIGltZy5zZXRBdHRyaWJ1dGUoXCJhbHRcIiwgdGhpcy5fbmFtZSk7XHJcblxyXG4gICAgY29uc3QgY2FyZFRpdGxlID0gY2FyZC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRzX19oZWFkZXJcIik7XHJcbiAgICBjYXJkVGl0bGUudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG5cclxuICAgIHRoaXMuX2NhcmQgPSBjYXJkO1xyXG4gICAgdGhpcy5fbGlrZUJ1dHRvbiA9IHRoaXMuX2NhcmQucXVlcnlTZWxlY3RvcihcIi5jYXJkc19fbGlrZS1idXR0b25cIik7XHJcbiAgICB0aGlzLl9saWtlc0NvdW50ZXIgPSB0aGlzLl9jYXJkLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZHNfX2xpa2VzLWNvdW50ZXJcIilcclxuICAgIHRoaXMuX2xpa2VzQ291bnRlci50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2VzLmxlbmd0aCBcclxuXHJcbiAgICBsZXQgaXNMaWtlZCA9IHRoaXMuX2xpa2VzLnNvbWUocGVyc29uID0+IHBlcnNvbi5faWQgPT09IHRoaXMuX3VzZXJJZClcclxuICAgIGlmIChpc0xpa2VkKSB7XHJcbiAgICAgIHRoaXMubGlrZUNhcmQodGhpcy5fbGlrZXMpXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIHJldHVybiB0aGlzLl9jYXJkO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2FyZDtcclxuIiwiY2xhc3MgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX3BvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2hhbmRsZUVzY0Nsb3NlID0gdGhpcy5faGFuZGxlRXNjQ2xvc2UuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuX2hhbmRsZUNsb3NlUG9wdXB3V2l0aE92ZXJsYXkgPSB0aGlzLl9oYW5kbGVDbG9zZVBvcHVwd1dpdGhPdmVybGF5LmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICAvLyBQcml2YXRlIG1ldGhvZCB0aGF0IGNsb3NlIHBvcHVwIHdpbmRvdyBieSBFc2NhcGUga2V5LlxyXG4gIF9oYW5kbGVFc2NDbG9zZShldmVudCkge1xyXG4gICAgaWYgKGV2ZW50LmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBQcml2YXRlIG1ldGhvZCB0aGF0IGNsb3NlIHBvcHVwIHdpbmRvdyBieSBjbGlja2luZyBvbiB0aGUgb3ZlcmxheS5cclxuICBfaGFuZGxlQ2xvc2VQb3B1cHdXaXRoT3ZlcmxheShldmVudCkge1xyXG4gICAgaWYgKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJwb3B1cF9vcGVuXCIpKSB7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFB1YmxpYyBtZXRob2QgdGhhdCBhZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBjbG9zZSBpY29uIG9mIHRoZSBwb3B1cC5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIGNvbnN0IGNsb3NlQnV0dG9uID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9fY2xvc2UtYnV0dG9uXCIpO1xyXG5cclxuICAgIGNsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gUHVibGljIG1ldGhvZCB0aGF0IG9wZW4gdGhlIHBvcHVwIHdpbmRvdy5cclxuICBvcGVuKCkge1xyXG4gICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LmFkZChcInBvcHVwX29wZW5cIik7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuX2hhbmRsZUNsb3NlUG9wdXB3V2l0aE92ZXJsYXkpO1xyXG4gIH1cclxuXHJcbiAgLy8gUHVibGljIG1ldGhvZCB0aGF0IGNsb3NlIHRoZSBwb3B1cCB3aW5kb3cuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QucmVtb3ZlKFwicG9wdXBfb3BlblwiKTtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5faGFuZGxlQ2xvc2VQb3B1cHdXaXRoT3ZlcmxheSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQb3B1cDtcclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwLmpzXCI7XHJcblxyXG5jbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIHN1Ym1pdEhhbmRsZXIpIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpOyAvLyB0aGlzLl9wb3B1cFxyXG4gICAgdGhpcy5fc3VibWl0SGFuZGxlciA9IHN1Ym1pdEhhbmRsZXI7XHJcbiAgICB0aGlzLl9mb3JtID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9fZm9ybVwiKTtcclxuICAgIHRoaXMuX2lucHV0cyA9IEFycmF5LmZyb20odGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiLnBvcHVwX19pbnB1dFwiKSk7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX3N1Ym1pdC1idXR0b25cIik7XHJcbiAgfVxyXG5cclxuICAvLyBQcml2YXRlIG1ldGhvZCB3aGljaCBjb2xsZWN0IGRhdGEgZnJvbSBhbGwgdGhlIGlucHV0IGZpZWxkcy5cclxuICBnZXRJbnB1dHNWYWx1ZXMoKSB7XHJcbiAgICBjb25zdCBpbnB1dHNWYWx1ZXMgPSB7fTtcclxuICAgIHRoaXMuX2lucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICBpbnB1dHNWYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGlucHV0c1ZhbHVlcztcclxuICB9XHJcblxyXG4gIC8vIE1vZGlmaWVzIHRoZSBwYXJlbnQgbWV0aG9kIGFuZCBhZGQgZXZlbnQgbGlzdGVuZXIgdG8gY2xvc2UgaWNvbiBhbmQgc3VibWl0IGJ1dHRvbi5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gXCJTYXZpbmcuLi5cIjtcclxuICAgICAgdGhpcy5fc3VibWl0SGFuZGxlcigpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBNb2RpZmllcyB0aGUgcGFyZW50IG1ldGhvZCBpbiBvcmRlciB0byByZXNldCB0aGUgZm9ybSBvbmNlIHRoZSBwb3B1cCBpcyBjbG9zZWQuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICBzdXBlci5jbG9zZSgpO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gXCJTYXZlXCI7XHJcbiAgICB0aGlzLl9mb3JtLnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQb3B1cFdpdGhGb3JtO1xyXG4iLCJpbXBvcnQgJy4vaW5kZXguY3NzJztcclxuaW1wb3J0IHsgRm9ybVZhbGlkYXRvciB9IGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcclxuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xyXG5pbXBvcnQge1xyXG4gIGNhcmRUZW1wbGF0ZSxcclxuICBjb25maWcsXHJcbiAgY2FyZHNDb250YWluZXIsXHJcbiAgcHJvZmlsZUZvcm1Qb3B1cFNlbGVjdG9yLFxyXG4gIGNhcmRGb3JtUG9wdXBTZWxlY3RvcixcclxuICBwcm9maWxlTmFtZSxcclxuICBwcm9maWxlRGVzY3JpcHRpb24sXHJcbiAgYXZhdGFyUGljdHVyZSxcclxuICBwb3B1cFR5cGVJbWFnZVNlbGVjdG9yLFxyXG4gIHBvcHVwTmFtZSxcclxuICBwb3B1cERlc2NyaXB0aW9uLFxyXG4gIHBvcHVwRm9yRGVsZXRlQ2FyZCxcclxuICBjaGFuZ2VBdmF0YXJQb3B1cFNlbGVjdG9yLCBcclxuICBwb3B1cEltYWdlLFxyXG4gIHBvcHVwSW1hZ2VEZXNjcmlwdGlvblxyXG59IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoU3VibWl0IGZyb20gJy4uL2NvbXBvbmVudHMvUG9wdXBXaXRoU3VibWl0JztcclxuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCBBcGkgZnJvbSBcIi4uL2NvbXBvbmVudHMvQXBpLmpzXCI7XHJcblxyXG4vLyBUb2tlbjogMzhhMjM4NzgtNjRjZS00YWJiLWFlMGQtZDMwZDExY2M5YTM4IEdyb3VwIElEOiBncm91cC0xMlxyXG5jb25zdCBhcGkgPSBuZXcgQXBpKHtcclxuICBiYXNlVXJsOiBcImh0dHBzOi8vYXJvdW5kLm5vbW9yZXBhcnRpZXMuY28vdjEvZ3JvdXAtMTJcIixcclxuICBoZWFkZXJzOiB7XHJcbiAgICBhdXRob3JpemF0aW9uOiBcIjM4YTIzODc4LTY0Y2UtNGFiYi1hZTBkLWQzMGQxMWNjOWEzOFwiLFxyXG4gICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcclxuICB9XHJcbn0pO1xyXG5cclxubGV0IHVzZXJJZDtcclxuXHJcbmNvbnN0IGZvcm1WYWxpZGF0b3JzID0ge31cclxuXHJcbi8vIEVuYWJsZSB2YWxpZGF0aW9uXHJcbmNvbnN0IGVuYWJsZVZhbGlkYXRpb24gPSAoY29uZmlnKSA9PiB7XHJcbiAgY29uc3QgZm9ybUxpc3QgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY29uZmlnLmZvcm1TZWxlY3RvcikpXHJcbiAgZm9ybUxpc3QuZm9yRWFjaCgoZm9ybUVsZW1lbnQpID0+IHtcclxuICAgIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKGNvbmZpZywgZm9ybUVsZW1lbnQpXHJcbiAgICAvLyBDcmVhdGUgdGhlIG5hbWUgb2YgdGhlIGZvcm1cclxuICAgIGNvbnN0IGZvcm1OYW1lID0gZm9ybUVsZW1lbnQuZ2V0QXR0cmlidXRlKCduYW1lJylcclxuXHJcbiAgIC8vIFN0b3JlIGEgdmFsaWRhdG9yIGJ5IHRoZSBgbmFtZWAgb2YgdGhlIGZvcm1cclxuICAgIGZvcm1WYWxpZGF0b3JzW2Zvcm1OYW1lXSA9IHZhbGlkYXRvcjtcclxuICAgdmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuICB9KTtcclxufTtcclxuZW5hYmxlVmFsaWRhdGlvbihjb25maWcpO1xyXG5cclxuY29uc3QgaW1hZ2VQb3B1cCA9IG5ldyBQb3B1cFdpdGhJbWFnZShwb3B1cFR5cGVJbWFnZVNlbGVjdG9yLCBwb3B1cEltYWdlLCBwb3B1cEltYWdlRGVzY3JpcHRpb24pO1xyXG5pbWFnZVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5jb25zdCBhZGROZXdDYXJkID0gKGRhdGEpID0+IHtcclxuICBjb25zdCBjYXJkID0gbmV3IENhcmQoe1xyXG4gICAgZGF0YSxcclxuICAgIGhhbmRsZUNhcmRDbGljazogKCkgPT4ge1xyXG4gICAgICBpbWFnZVBvcHVwLm9wZW4oZGF0YSk7XHJcbiAgICB9LFxyXG4gICAgaGFuZGxlTGlrZUljb246IChjYXJkSWQsIHVzZXJJZCwgbGlrZXNBcnJheSkgPT4ge1xyXG4gICAgICBpZiAoIWxpa2VzQXJyYXkuZmluZCh1c2VyID0+IHVzZXIuX2lkID09PSB1c2VySWQgKSkge1xyXG4gICAgICAgIGFwaS5saWtlQ2FyZChjYXJkSWQpXHJcbiAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgY2FyZC5saWtlQ2FyZChyZXMubGlrZXMpXHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkFkZGVkIGxpa2UgdG8gY2FyZDogXCIsIHJlcy5saWtlcyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFwaS5kaXNsaWtlQ2FyZChjYXJkSWQpXHJcbiAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgY2FyZC5kaXNsaWtlQ2FyZChyZXMubGlrZXMpXHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlJlbW92ZWQgbGlrZSBmcm9tIGNhcmQ6IFwiLCByZXMubGlrZXMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGhhbmRsZURlbGV0ZUNhcmQ6ICgpID0+IHtcclxuICAgICAgcG9wdXBBc2tGb3JEZWxldGUub3BlbigpO1xyXG4gICAgICBwb3B1cEFza0ZvckRlbGV0ZS5zZXRBY3Rpb24oKCkgPT4ge1xyXG4gICAgICAgIGFwaS5kZWxldGVDYXJkKGRhdGEuX2lkKVxyXG4gICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImNhcmQgaXMgZGVsZXRlZFwiLCByZXMpO1xyXG4gICAgICAgICAgICBjYXJkLnJlbW92ZUNhcmQoKTtcclxuICAgICAgICAgICAgcG9wdXBBc2tGb3JEZWxldGUuY2xvc2UoKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpO1xyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH0sIGNhcmRUZW1wbGF0ZSwgdXNlcklkKTtcclxuICByZXR1cm4gY2FyZC5jcmVhdGVDYXJkKCk7XHJcbn07XHJcblxyXG5jb25zdCBjYXJkcyA9IG5ldyBTZWN0aW9uKHsgcmVuZGVyZXI6IGFkZE5ld0NhcmQgfSwgY2FyZHNDb250YWluZXIpO1xyXG5cclxuXHJcblByb21pc2UuYWxsKFthcGkuZ2V0VXNlckluZm8oKSwgYXBpLmdldEluaXRpYWxDYXJkcygpXSlcclxuICAudGhlbigoW3VzZXJEYXRhLCBjYXJkc0RhdGFdKSA9PiB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInVzZXIgZGF0YVwiLCB1c2VyRGF0YSk7XHJcbiAgICB1c2VySW5mby5zZXRVc2VySW5mbyh7bmFtZTogdXNlckRhdGEubmFtZSwgYWJvdXQ6IHVzZXJEYXRhLmFib3V0fSk7XHJcbiAgICB1c2VySW5mby5zZXRVc2VyQXZhdGFyKHVzZXJEYXRhLmF2YXRhcik7XHJcbiAgICB1c2VySWQgPSB1c2VyRGF0YS5faWRcclxuICAgIGNhcmRzLnJlbmRlcmVyKGNhcmRzRGF0YSk7XHJcbiAgfSlcclxuICAuY2F0Y2goZXJyID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGVycik7XHJcbn0pO1xyXG5cclxuICBjb25zdCBwb3B1cEFza0ZvckRlbGV0ZSA9IG5ldyBQb3B1cFdpdGhTdWJtaXQocG9wdXBGb3JEZWxldGVDYXJkKTtcclxuICBwb3B1cEFza0ZvckRlbGV0ZS5zZXRFdmVudExpc3RlbmVycygpXHJcblxyXG4vLyBQb3B1cCBmb3IgcHJvZmlsZSBkZXRhaWxzIGZvcm0uXHJcbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHByb2ZpbGVOYW1lLCBwcm9maWxlRGVzY3JpcHRpb24sIGF2YXRhclBpY3R1cmUpO1xyXG5jb25zdCBwb3B1cFdpdGhQcm9maWxlID0gbmV3IFBvcHVwV2l0aEZvcm0ocHJvZmlsZUZvcm1Qb3B1cFNlbGVjdG9yLCAoKSA9PiB7XHJcbmNvbnN0IHByb2ZpbGVEYXRhID0gcG9wdXBXaXRoUHJvZmlsZS5nZXRJbnB1dHNWYWx1ZXMoKTtcclxuICBhcGkuc2V0VXNlckluZm8ocHJvZmlsZURhdGEpXHJcbiAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgY29uc29sZS5sb2coXCJyZXNcIiwgcmVzKTtcclxuICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHByb2ZpbGVEYXRhKTtcclxuICAgIHBvcHVwV2l0aFByb2ZpbGUuY2xvc2UoKTtcclxuICB9KVxyXG4gIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKSk7XHJcbn0pO1xyXG5cclxuXHJcblxyXG5wb3B1cFdpdGhQcm9maWxlLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5jb25zdCBvcGVuRWRpdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fZWRpdC1idXR0b25cIik7XHJcbm9wZW5FZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgcG9wdXBXaXRoUHJvZmlsZS5vcGVuKCk7XHJcbiAgY29uc3QgdXNlckRhdGEgPSB1c2VySW5mby5nZXRVc2VySW5mbygpO1xyXG4gIHBvcHVwTmFtZS52YWx1ZSA9IHVzZXJEYXRhLm5hbWU7XHJcbiAgcG9wdXBEZXNjcmlwdGlvbi52YWx1ZSA9IHVzZXJEYXRhLmFib3V0O1xyXG4gIGZvcm1WYWxpZGF0b3JzW1wiZWRpdC1wcm9maWxlXCJdLnJlc2V0VmFsaWRhdGlvbigpO1xyXG59KTtcclxuXHJcbmNvbnN0IGF2YXRhclBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oY2hhbmdlQXZhdGFyUG9wdXBTZWxlY3RvciwgKCkgPT4geyBcclxuY29uc3QgYXZhdGFyVXJsID0gYXZhdGFyUG9wdXAuZ2V0SW5wdXRzVmFsdWVzKCk7XHJcbiAgYXBpLmNoYW5nZUF2YXRhcihhdmF0YXJVcmwpXHJcbiAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIHVzZXJJbmZvLnNldFVzZXJBdmF0YXIocmVzLmF2YXRhcik7XHJcbiAgICAgIGF2YXRhclBvcHVwLmNsb3NlKClcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpO1xyXG59KTtcclxuYXZhdGFyUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbmNvbnN0IG9wZW5FZGl0QXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19hdmF0YXJcIik7XHJcbm9wZW5FZGl0QXZhdGFyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgYXZhdGFyUG9wdXAub3BlbigpO1xyXG4gIGZvcm1WYWxpZGF0b3JzW1wiYXZhdGFyXCJdLnJlc2V0VmFsaWRhdGlvbigpO1xyXG59KVxyXG5cclxuLy8gUG9wdXAgZm9yIGFkZCBjYXJkIGZvcm0uXHJcbmNvbnN0IHBvcHVwV2l0aEFkZENhcmQgPSBuZXcgUG9wdXBXaXRoRm9ybShjYXJkRm9ybVBvcHVwU2VsZWN0b3IsICgpID0+IHtcclxuICBjb25zdCBkYXRhID0gcG9wdXBXaXRoQWRkQ2FyZC5nZXRJbnB1dHNWYWx1ZXMoKVxyXG4gIFxyXG4gIGFwaS5jcmVhdGVDYXJkKGRhdGEpXHJcbiAgICAudGhlbihpdGVtID0+IHtcclxuICAgICAgY2FyZHMucmVuZGVyZXIoW2l0ZW1dKTtcclxuICAgICAgcG9wdXBXaXRoQWRkQ2FyZC5jbG9zZSgpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKSk7XHJcbn0pXHJcbiAgXHJcbnBvcHVwV2l0aEFkZENhcmQuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbmNvbnN0IG9wZW5BZGRDYXJkRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYWRkLWJ1dHRvblwiKTtcclxub3BlbkFkZENhcmRGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgcG9wdXBXaXRoQWRkQ2FyZC5vcGVuKCk7XHJcbiAgZm9ybVZhbGlkYXRvcnNbXCJhZGQtcGxhY2VcIl0ucmVzZXRWYWxpZGF0aW9uKCk7XHJcbn0pO1xyXG4iLCJjbGFzcyBBcGkge1xyXG4gIGNvbnN0cnVjdG9yKHtiYXNlVXJsLCBoZWFkZXJzfSkge1xyXG4gICAgdGhpcy5fYmFzZVVybCA9IGJhc2VVcmw7XHJcbiAgICB0aGlzLl9oZWFkZXJzID0gaGVhZGVycztcclxuICB9XHJcblxyXG4gIGN1c3RvbUZldGNoKHVybCwgaGVhZGVycykge1xyXG4gICAgcmV0dXJuIGZldGNoKHVybCwgaGVhZGVycylcclxuICAgIC50aGVuKHJlcyA9PiByZXMub2sgPyByZXMuanNvbigpIDogUHJvbWlzZS5yZWplY3QocmVzLnN0YXR1c1RleHQpKVxyXG4gIH0gXHJcblxyXG4gIC8vIG90aGVyIG1ldGhvZHMgZm9yIHdvcmtpbmcgd2l0aCB0aGUgQVBJXHJcblxyXG4gIGdldEluaXRpYWxDYXJkcygpIHtcclxuICAgIHJldHVybiB0aGlzLmN1c3RvbUZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgICAgbWV0aG9kOiAnR0VUJyAvLyBkZWZhdWx0IG9wdGlvblxyXG4gICAgfSlcclxuICB9XHJcbiAgXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jdXN0b21GZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICAgIG1ldGhvZDogJ0dFVCdcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBjaGFuZ2VBdmF0YXIobmV3QXZhdGFyKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jdXN0b21GZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZS9hdmF0YXJgLCB7XHJcbiAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgICBtZXRob2Q6ICdQQVRDSCcsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkobmV3QXZhdGFyKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHNldFVzZXJJbmZvKGRhdGEpIHtcclxuICAgIHJldHVybiB0aGlzLmN1c3RvbUZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCwge1xyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlQ2FyZChkYXRhKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jdXN0b21GZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcclxuICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLCBcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGRlbGV0ZUNhcmQoY2FyZElkKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jdXN0b21GZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XHJcbiAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycywgXHJcbiAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBsaWtlQ2FyZChjYXJkSWQpIHtcclxuICAgIHJldHVybiB0aGlzLmN1c3RvbUZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzL2xpa2VzLyR7Y2FyZElkfWAsIHtcclxuICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLCBcclxuICAgICAgICBtZXRob2Q6ICdQVVQnLFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGRpc2xpa2VDYXJkKGNhcmRJZCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY3VzdG9tRmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvbGlrZXMvJHtjYXJkSWR9YCwge1xyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsIFxyXG4gICAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFwaTsiLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXAuanNcIjtcclxuLy8gaW1wb3J0IHsgcG9wdXBEZXNjcmlwdGlvbiwgcG9wdXBJbWFnZSwgcG9wdXBJbWFnZURlc2NyaXB0aW9uIH0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xyXG4vLyBpbXBvcnQgKiBhcyBjb25zdGFudHMgZnJvbSBcIi4uLy4uL3NyYy91dGlscy9jb25zdGFudHMuanNcIjtcclxuXHJcbmNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBwb3B1cEltYWdlLCBwb3B1cEltYWdlRGVzY3JpcHRpb24pIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpOyAvLyB0aGlzLl9wb3B1cFxyXG4gICAgdGhpcy5fcG9wdXBJbWFnZSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IocG9wdXBJbWFnZSk7XHJcbiAgICB0aGlzLl9pbWFnZURlc2NyaXB0aW9uID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3Rvcihwb3B1cEltYWdlRGVzY3JpcHRpb24pO1xyXG4gIH1cclxuXHJcbiAgb3BlbihjYXJkRGF0YSkge1xyXG4gICAgc3VwZXIub3BlbigpO1xyXG4gICAgdGhpcy5fcG9wdXBJbWFnZS5zcmMgPSBjYXJkRGF0YS5saW5rO1xyXG4gICAgdGhpcy5fcG9wdXBJbWFnZS5hbHQgPSBjYXJkRGF0YS5uYW1lO1xyXG4gICAgdGhpcy5faW1hZ2VEZXNjcmlwdGlvbi50ZXh0Q29udGVudCA9IGNhcmREYXRhLm5hbWU7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQb3B1cFdpdGhJbWFnZTtcclxuIiwiY2xhc3MgU2VjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyByZW5kZXJlciB9LCBjb250YWluZXJTZWxlY3Rvcikge1xyXG4gICAgLy8gdGhpcy5faXRlbXMgPSBpdGVtcztcclxuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lclNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIC8vIFB1YmxpYyBtZXRob2QgdGhhdCByZW5kZXJzIGFsbCBlbGVtZW50cyBvbiB0aGUgcGFnZS5cclxuICByZW5kZXJlcihpdGVtcykge1xyXG4gICAgaXRlbXMuZm9yRWFjaCgoY2FyZERhdGEpID0+IHtcclxuICAgICAgY29uc3QgY2FyZCA9IHRoaXMuX3JlbmRlcmVyKGNhcmREYXRhKTtcclxuICAgICAgdGhpcy5hZGRJdGVtKGNhcmQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWMgbWV0aG9kIHRoYXQgdGFrZXMgYSBET00gZWxlbWVudCBhbmQgYWRkcyBpdCB0byB0aGUgY29udGFpbmVyLlxyXG4gIGFkZEl0ZW0oY2FyZEVsZW1lbnQpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGNhcmRFbGVtZW50KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlY3Rpb247XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cC5qc1wiO1xyXG5cclxuY2xhc3MgUG9wdXBXaXRoU3VibWl0IGV4dGVuZHMgUG9wdXAge1xyXG4gIHNldEFjdGlvbihhY3Rpb24pIHtcclxuICAgICAgdGhpcy5fc3VibWl0SGFuZGxlciA9IGFjdGlvbjtcclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5fc3VibWl0SGFuZGxlcigpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUG9wdXBXaXRoU3VibWl0OyIsImNsYXNzIFVzZXJJbmZvIHtcclxuICBjb25zdHJ1Y3RvcihuYW1lLCBqb2IsIGF2YXRhcikge1xyXG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XHJcbiAgICB0aGlzLl9qb2IgPSBqb2I7XHJcbiAgICB0aGlzLl9hdmF0YXIgPSBhdmF0YXI7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWMgbWV0aG9kIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IHdpdGggaW5mb3JtYXRpb24gYWJvdXQgdGhlIHVzZXIuXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICByZXR1cm4geyBuYW1lOiB0aGlzLl9uYW1lLnRleHRDb250ZW50LCBhYm91dDogdGhpcy5fam9iLnRleHRDb250ZW50IH07XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWMgbWV0aG9kIHdoaWNoIHRha2VzIG5ldyB1c2VyIGRhdGEgYW5kIGFkZHMgaXQgb24gdGhlIHBhZ2UuXHJcbiAgc2V0VXNlckluZm8obmV3RGF0YSkge1xyXG4gICAgdGhpcy5fbmFtZS50ZXh0Q29udGVudCA9IG5ld0RhdGEubmFtZTtcclxuICAgIHRoaXMuX2pvYi50ZXh0Q29udGVudCA9IG5ld0RhdGEuYWJvdXQ7XHJcbiAgfVxyXG4gIC8vIFB1YmxpYyBtZXRob2Qgd2hpY2ggaW5wdXQgdGhlIG5ldyBhdmF0YXIgdG8gdGhlIHBhZ2UuXHJcbiAgc2V0VXNlckF2YXRhcihuZXdBdmF0YXIpIHtcclxuICAgIHRoaXMuX2F2YXRhci5zdHlsZSA9IGBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHtuZXdBdmF0YXJ9KTtgXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBVc2VySW5mbztcclxuIl0sIm5hbWVzIjpbIkZvcm1WYWxpZGF0b3IiLCJjb25zdHJ1Y3RvciIsInNldHRpbmdzIiwiZm9ybUVsZW1lbnQiLCJ0aGlzIiwiX3NldHRpbmdzIiwiX2Zvcm1FbGVtZW50IiwiX2lucHV0c0xpc3QiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5wdXRTZWxlY3RvciIsIl9idXR0b24iLCJxdWVyeVNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfc2hvd0Vycm9yTWVzc2FnZSIsImlucHV0IiwiZXJyb3JNZXNzYWdlIiwiaW5wdXRFcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsIl9lcnJvckVsZW1lbnQiLCJpZCIsInRleHRDb250ZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiX2hpZGVFcnJvck1lc3NhZ2UiLCJyZW1vdmUiLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwidmFsaWRpdHkiLCJ2YWxpZCIsInZhbGlkYXRpb25NZXNzYWdlIiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsInNvbWUiLCJpbnB1dEVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJmb3JFYWNoIiwiYWRkRXZlbnRMaXN0ZW5lciIsImVuYWJsZVZhbGlkYXRpb24iLCJldnQiLCJyZXNldFZhbGlkYXRpb24iLCJjYXJkVGVtcGxhdGUiLCJkb2N1bWVudCIsImNvbnRlbnQiLCJwcm9maWxlTmFtZSIsImF2YXRhclBpY3R1cmUiLCJwcm9maWxlRGVzY3JpcHRpb24iLCJwb3B1cE5hbWUiLCJwb3B1cERlc2NyaXB0aW9uIiwicG9wdXBTZWxlY3RvciIsIl9wb3B1cCIsIl9oYW5kbGVFc2NDbG9zZSIsImJpbmQiLCJfaGFuZGxlQ2xvc2VQb3B1cHdXaXRoT3ZlcmxheSIsImV2ZW50Iiwia2V5IiwiY2xvc2UiLCJ0YXJnZXQiLCJjb250YWlucyIsInNldEV2ZW50TGlzdGVuZXJzIiwib3BlbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJQb3B1cCIsInN1Ym1pdEhhbmRsZXIiLCJzdXBlciIsIl9zdWJtaXRIYW5kbGVyIiwiX2Zvcm0iLCJfaW5wdXRzIiwiX3N1Ym1pdEJ1dHRvbiIsImdldElucHV0c1ZhbHVlcyIsImlucHV0c1ZhbHVlcyIsIm5hbWUiLCJ2YWx1ZSIsInByZXZlbnREZWZhdWx0IiwicmVzZXQiLCJhcGkiLCJiYXNlVXJsIiwiaGVhZGVycyIsIl9iYXNlVXJsIiwiX2hlYWRlcnMiLCJjdXN0b21GZXRjaCIsInVybCIsImZldGNoIiwidGhlbiIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXNUZXh0IiwiZ2V0SW5pdGlhbENhcmRzIiwibWV0aG9kIiwiZ2V0VXNlckluZm8iLCJjaGFuZ2VBdmF0YXIiLCJuZXdBdmF0YXIiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInNldFVzZXJJbmZvIiwiZGF0YSIsImNyZWF0ZUNhcmQiLCJkZWxldGVDYXJkIiwiY2FyZElkIiwibGlrZUNhcmQiLCJkaXNsaWtlQ2FyZCIsImF1dGhvcml6YXRpb24iLCJ1c2VySWQiLCJmb3JtVmFsaWRhdG9ycyIsImNvbmZpZyIsImZvcm1TZWxlY3RvciIsInZhbGlkYXRvciIsImZvcm1OYW1lIiwiZ2V0QXR0cmlidXRlIiwiaW1hZ2VQb3B1cCIsInBvcHVwSW1hZ2UiLCJwb3B1cEltYWdlRGVzY3JpcHRpb24iLCJfcG9wdXBJbWFnZSIsIl9pbWFnZURlc2NyaXB0aW9uIiwiY2FyZERhdGEiLCJzcmMiLCJsaW5rIiwiYWx0IiwiY2FyZHMiLCJyZW5kZXJlciIsImNvbnRhaW5lclNlbGVjdG9yIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsIml0ZW1zIiwiY2FyZCIsImFkZEl0ZW0iLCJjYXJkRWxlbWVudCIsInByZXBlbmQiLCJoYW5kbGVDYXJkQ2xpY2siLCJoYW5kbGVEZWxldGVDYXJkIiwiaGFuZGxlTGlrZUljb24iLCJfdGVtcGxhdGUiLCJfbmFtZSIsIl9saW5rIiwiX293bmVySWQiLCJvd25lciIsIl9pZCIsIl9oYW5kbGVDYXJkQ2xpY2siLCJfaGFuZGxlTGlrZUljb24iLCJfaGFuZGxlRGVsZXRlQ2FyZCIsIl91c2VySWQiLCJfbGlrZXMiLCJsaWtlcyIsIl9jYXJkSWQiLCJfbGlrZUJ1dHRvbiIsImRlbGV0ZUJ1dHRvbiIsIl9jYXJkIiwic3R5bGUiLCJkaXNwbGF5IiwicmVtb3ZlQ2FyZCIsIm5ld0xpa2VzIiwiX2xpa2VzQ291bnRlciIsImxlbmd0aCIsImNsb25lTm9kZSIsImltZyIsInBlcnNvbiIsImxpa2VzQXJyYXkiLCJmaW5kIiwidXNlciIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImVyciIsInBvcHVwQXNrRm9yRGVsZXRlIiwic2V0QWN0aW9uIiwiYWxsIiwidXNlckRhdGEiLCJjYXJkc0RhdGEiLCJ1c2VySW5mbyIsImFib3V0Iiwic2V0VXNlckF2YXRhciIsImF2YXRhciIsImFjdGlvbiIsImpvYiIsIl9qb2IiLCJfYXZhdGFyIiwibmV3RGF0YSIsInBvcHVwV2l0aFByb2ZpbGUiLCJQb3B1cFdpdGhGb3JtIiwicHJvZmlsZURhdGEiLCJhdmF0YXJQb3B1cCIsImF2YXRhclVybCIsInBvcHVwV2l0aEFkZENhcmQiLCJpdGVtIl0sInNvdXJjZVJvb3QiOiIifQ==